        👍COMO SABER CUANTAS FILAS O CUANTAS COLUMNAS
                VA A TENER UN LAYOUT A SIMPLE VISTA:
Esta regla funciona tanto para las filas como
para las columnas; SIEMPRE se debe tomar como
referencia el elemento con el tamaño mas
pequeño y apartir de ahi, definir cuantas filas
Y/O columnas puede tener dicho LAYOUT.

PROPIEDADES CONTENEDOR PADRE DIRECTAMENTE =>
        🎉FILAS Y COLUMNAS EN GRID
🎉display: grid; => Esta propiedad aplica el
concepto de grillas en todo el layout.
Cuando hablo de grillas, me refiero a filas y a
columnas.

🎉FRACCIÓN(1fr) => De todo el espacio que tenga
disponible, lo va a distribuir entre todos los
elementos que existan.

🎉grid-template-columns: 100px 1fr 100px; => Esta 
propiedad dice el número de columnas que quiero
establecer.

🎉grid-template-rows: 80px 1fr 150px; => Esta 
propiedad dice el número de filas que quiero
establecer.

🎉grid-template: 50% 50% / 1fr 1fr 100px; => Este
es un primer shortHand, que toma primero el numero
de filas y posteriormente el numero de columnas.

🎉grid: 50% 50% / 1fr 1fr 100px; => Este es un
segundo shortHand, que toma primero el numero de
filas y posteriormente el numero de columnas.

🎉grid-gap: 15px; => Esta propiedad aplica un
espaciado entre cada uno de los elementos.

🎉grip-column-gap: 10px; => Esta propiedad aplica un
espaciado entre las columnas del layout.

🎉grip-row-gap: 10px; => Esta propiedad aplica un
espaciado entre las filas del layout.

        🧨SE PUEDEN TENER GRIDS DENTRO DE OTROS GRIDS:
🧨display: inline-grid; => Crea un grid de una sola
linea(Unidimensional).

🧨display: subgrid; => Herada las caracteristicas grid
de su elemento PADRE.

🧨🧨NOTA => Estas propiedades todavia no estan disponibles.

        🏆NOMBRES A LAS FILAS Y A LAS COLUMNAS:
🏆Darle nombres a las lineas de las filas y de las columnas, nos
ayuda en el momento de hacerlas mas grandes o mas pequeñas,
lo hacemos de la siguiente forma:

🏆grid-template-columns: [lineaColumnaInicio1] 1fr [ColumnaLinea1] 1fr [ColumnaLinea2] 1fr [ColumnaLineaFinal];
🏆grid-template-rows: [lineaInicio1] 1fr [linea1] 1fr [linea2] 1fr [lineaFinal];

             🎉AYUDA DE FIREFOX =>
🎉LINEA CONTINUA => Contiene la grid explicita,
es decir, el numero de filas Y/O columnas que
le indicamos que tenga nuestro Layout.

🎉LINEA DESCONTINUA => Contiene los elementos
que se acomodan de forma implicita, posterior
a las medidas explicitas indicadas. es decir,
estos elementos grid los acomoda, de acuerdo
al espaciado disponible del contenedor PADRE.

🎉LINEA PUNTEADA => ?

🎨TAMAÑOS MINIMOS Y MÁXIMOS PARA LOS ELEMENTOS
🎨minmax(); => Esta propiedad me ayuda mucho para
realizar sitios responsive combinados con media
querys.

🎨grid-template-columns: minmax(300px, 1fr) 1fr; =>
Digo a las columnas que tenga un ancho minimo y
ancho maximo, si el cuenta con el espacio necesario
del elemento padre, el va a tomar el ancho maximo
por defecto, pero el ancho minimo no se disminuye 
menos de lo especificado.

🎨grid-template-rows: minmax(50px, auto) 100px; =>
Digo a las filas que tenga un alto minimo y
alto maximo, si el cuenta con el espacio necesario
del elemento padre, el va a tomar el alto maximo
por defecto, pero el alto minimo no se disminuye 
menos de los especificado.

🎨QUE ES auto =>
🎨AUTO: Cuando le doy un valor a un elemento de auto,
este elemento va a tomar su ancho o alto en layout
dependiendo solamente del tamaño que abarque su 
contenido interno.

🎨QUE ES maxcontent =>
MAXCONTENT: El contenedor PADRE va a tener un ancho
o un alto maximo del tamaño de su contenido interno.

🎨NOTA => Tener en cuenta que la función minmax();
funciona para las columnas afectando su ancho y
para las filas afectando su alto.

                🎄FUNCIÓN repeat();
🎄grid-template-columns: repeat(6, minmax(200px, 1fr)); =>
se la puedo aplicar tanto a las columnas como a las 
filas y me ayuda a no tener que repetir los valores
cuando sean iguales, además de por derla combinar con otras
medidas como piexeles. El primer argumento es el numero
de veces que se debe repetir un valor, y el segundo
argumento es el valor que se debe repetir.

                🎊POSICIONAMIENTO
🎊grid-column-start: 1; | 🎊grid-column-start: 2;
🎊grid-column-end: -1;  | 🎊grid-column-end: 4;
                🎊grid-column: 2 / 4;
Los elementos empiezan a posicionarse desde una columna
inicial y una columna final, por ende, también pueden
cambiar su tamaño, al hacerse más grandes o más pequeños.
Esta propiedad funciona con números negativos de 
izquierda a derecha y con números positivos de derecha
a izquierda, en este caso para las columnas.

🎊grid-row-start: 1; | 🎊grid-row-start: 2;
🎊grid-row-end: -1;  | 🎊grid-row-end: 4;
                🎊grid-row: 1 / 3;
Los elementos empiezan a posicionarse desde una fila
inicial y una fila final, por ende, también pueden
cambiar su tamaño, al hacerse más grandes o más pequeños.
Esta propiedad funciona con números negativos de 
izquierda a derecha y con números positivos de derecha
a izquierda, en este caso para las filas.

🎊grid-area: 1 / 2 / 4 / 4; => Esta propiedad alberga
las filas y las columnas en una sola linea y con el 
siguiente orden:
🎊grid-area: grid-row-start / grid-column-start /
                grid-row-end / grid-column-end;

                🎊ESTIRAR LOS ELEMENTOS =>
🎊grid-column: 2 / span 2; 
🎊grid-column: span 2; 
🎊grid-row: 2 / span 2;
🎊grid-row: span 3;
Estas propiedades le dan un inicio y un fin a un elemento
para que ocupe un espacio en el layout, eso pasa
gracias a la palabra SPAN que indica cuantas columnas o
filas va a tomar un elemento.
Cuando no se tiene un numero inicial se entiende que 
se empieza desde la grid explicita numero UNO.

                🥽GRID AREA =>
🥽Nos sirven para asignar una sección determinada
a un o varios elementos que hacen parte del layout
por medio, de la asignación de clases que ayuden
a identificar la sección del layout.
Para dejar un espacio en blanco en la definición
del area agrego un punto(.).

🥽NOTA #1 = Los elementos se pueden intercambiar de
lugar en todas las areas que existen en todo el
Layout.

🥽NOTA #2 = Cuando trabajo con areas no necesariamente
dejo de definir las filas y columnas de mi LAYOUT.

            🏈ALINEACIÓN DE ELEMENTOS =>
🏈PROPIEDADES CONTENEDOR PADRE:
🏈Alineando Los Elementos Horizontalmente:
🏈justify-items: start; => Esta propiedad me ayuda
alinear el elemento al inicio del contenedor.

🏈justify-items: center; => Esta propiedad me ayuda
alinear el elemento al centro del contenedor.

🏈justify-items: end; => Esta propiedad me ayuda
alinear el elemento al final del contenedor.

🏈justify-items: stretch; => Esta propiedad me ayuda
a que el elemento ocupe todo el ancho disponible
del contenedor padre.

Alineando Los Elementos Verticalmente:
🏈align-items: start; => Esta propiedad me ayuda
alinear el elemento al inicio del contenedor,
pero de forma VERTICAL.

🏈align-items: center; => Esta propiedad me ayuda
alinear el elemento al centro del contenedor,
pero de forma VERTICAL.

🏈align-items: end; => Esta propiedad me ayuda
alinear el elemento al final del contenedor,
pero de forma VERTICAL.

🏈align-items: stretch; => Esta propiedad me ayuda
a que el elemento ocupe todo el ancho disponible
del contenedor padre, pero de forma VERTICAL.

----------------------------------------
🏈PROPIEDAD PARA LOS ELEMENTOS HIJOS: 
🏈Alineando Los Elementos HIJOS Horizontalmente:
🏈justify-self: start; => Esta propiedad me ayuda
alineando el elemento al inicio del contenedor
PADRE.

🏈justify-self: center; => Esta propiedad me ayuda
alineando el elemento al centro del contenedor
PADRE.

🏈justify-self: end; => Esta propiedad me ayuda
alineando el elemento al final del contenedor
PADRE.

🏈justify-self: stretch; => Esta propiedad me ayuda
a ocupar todo el ancho disponible del contenedor
PADRE.

🏈Alineando Los Elementos HIJOS Verticalmente:
🏈align-self: start; => Esta propiedad me ayuda
alineando el elemento al inicio del contenedor
PADRE, pero de forma VERTICAL.

🏈align-self: center; => Esta propiedad me ayuda
alineando el elemento al centro del contenedor
PADRE, pero de forma VERTICAL.

🏈align-self: end; => Esta propiedad me ayuda
alineando el elemento al final del contenedor
PADRE, pero de forma VERTICAL.

🏈align-self: stretch; => Esta propiedad me ayuda
a ocupar todo el ancho disponible del contenedor
PADRE, pero de forma VERTICAL.

                🎲ALINEACION TRACKS =>
🎲Esta propiedad me sirve para alinear todo un bloque
de elementos, tantos de forma de vertical Y
Horizontal de forma interna del contenedor PADRE.

🎲Alinear Contenido Horizontalmente:
🎲justify-content: normal; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma normal, que es la que se aplica por defecto.

🎲justify-content: start; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma inicial del contenedor PADRE.

🎲justify-content: center; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma central del contenedor PADRE.

🎲justify-content: end; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma final del contenedor PADRE.

🎲justify-content: space-around; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos e incluyendo los
bordes.

🎲justify-content: space-evenly; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos e incluyendo los
bordes con una medidad igual.

🎲justify-content: space-between; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos sin incluir el
espacio de los bordes.

Alinear Contenido Verticalmente:
🎲align-content: normal; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma normal, que es la que se aplica por defecto
pero se debe tener encuenta que es de forma
VERTICAL.

🎲align-content: start; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma inicial del contenedor PADRE, pero de forma
VERTICAL.

🎲align-content: center; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma central del contenedor PADRE, pero de forma
VERTICAL.

🎲align-content: end; => Esta propiedad me
ayuda a mantener el bloque de los elementos en su
forma fina del contenedor PADRE, pero de forma
VERTICAL.

🎲align-content: space-around; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos e incluyendo los
bordes, pero de formar VERTICAL.

🎲align-content: space-between; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos sin incluir el
espacio de los bordes, pero de forma VERTICAL.

🎲align-content: space-evenly; => Esta propiedad
me ayuda a mantener el bloque de los elementos con
una separición entre los mismos e incluyendo los
bordes con una medidad igual, pero de forma 
VERTICAL.

                💎GRID IMPLICITA
💎Son los elementos que se agregan o distribuyen 
en el layout despues de definir la GRID EXPLICITA.

💎PROPIEDADES CONTENEDOR PADRE:
💎grid-auto-flow: row; => Esta Propiedad me cambia la 
dirección de mi GRID, por defecto viene para row,
es decir, para filas, en conclusión, los
elementos de la grid implicita se van a ir
agregando de forma vertical, hacia abajo.

💎Filas Automaticas(Implicitas) van a tener un alto de:
grid-auto-rows: 50px 300px 1fr;
El alto se debe definir para el numero de filas que tenga
en la grid implicta.

💎grid-auto-flow: column; => Esta Propiedad me define
la direccion de la GRID a column, es decir, ya se
van a ir agregando los elementos de forma horizontal,
en conclusión, de lado a lado los elementos de la GRID
implicta.

💎Columnas Automaticas(Implicitas) van a tener un ancho de:
grid-auto-columns: 600px 400px 1fr;
El ancho se debe definir para el numero de columnas que tenga
en la grid implicta.

💎grid-auto-flow: row dense; => Esta Propiedad Agrega una
distribucion equitativa a los elementos donde exista
un espacio en blanco y contengan las mismas
medidas entre el elemento y la grid. Funciona para
la direccion de row, es decir, de forma VERTICAL.

💎grid-auto-flow: column dense; => Esta Propiedad Agrega una
distribucion equitativa a los elementos donde exista
un espacio en blanco y contengan las mismas
medidas entre el elemento y la grid. Funciona para
la direccion de column, es decir, de forma 
Horizontal.

💎SE LE APLICA A LAS PROPIEDADES HIJOS:
💎Aqui estamos expandiendo las columnas y las filas,
y esto nos ayuda con los elementos de la GRID
IMPLICITA.

💎grid-column: span 2; Este se aplica solo cuando es row dense.
💎grid-row: span 2; Este se aplica solo cuando es column dense.

                🥊AUTO-FIT AND AUTO-FILL=>
🥊grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));

🥊AUTO-FILL:
Esta Propiedad pone en el contenedor padre
todas las columnas que tenga especificadas  y si en
su ancho disponible le caben mas, ps ese espacio quedara
en blanco, pero cuando el ancho se acabe, se van
a poner de forma vertical, que esto se ve en
dispositivos pequeños.

🥊AUTO-FIT:
Esta propiedad tiene el mismo resultado que
auto-fill cuando trabajamos con dispositivos
moviles, la diferencia la notamos con dispositvos
grandes, por que esta propiedad se va a distribuir
en todo el ancho disponible de su contenedor PADRE,
con el numero de columnas que especifiquemos.

🥊NOTA => No Esta Funcionando Para Filas.