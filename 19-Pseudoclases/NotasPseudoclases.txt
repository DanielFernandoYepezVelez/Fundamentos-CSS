DOCUMENTACIÓN:
https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
---------------------------------------------

PSEUDOCLASES:
Son selectores que reaccionan en tiempo real detectando la interación del usuario
con algunos elementos y se pueden activar estilos especiales dependiendo del contexto,
posición, estado o elemento.

No estan atados a ningun elemento, solo se puede aplicar la pseudoclase y listo.
:pseudoclase{
     estilos;
}

Lo elementos no necesariamente estan obligado a estar dentro de una lista, es decir, se puede seleccionar cualquier elemento, por que la etiqueta de body funciona como su ultimo envoltorio.
---------------------------------------------

PSEUDOCLASES PARA LISTAS:
Los estilos solo se le aplicaran al elemento
de la lista seleccionado, como por ejemplo:

ul li:first-child{}; primer Hijo(elemento)
ul li:nth-child{}; Hijo del Medio(elemento)
ul li:last-child{}; Ultimo Hijo(elemento)

Ademas, Puedo agregar la posición del 
elemento hijo que quiero alterar, como se 
muestra en el siguiente ejemplo:

ul li:nth-child(2){};
ul li:nth-child(1){};
ul li:nth-child(3){};

p:nth-child(2n){ (producto)
     color:red   
}
p:nth-child(2n + 1){ (suma)
     color: blue
}

n => Hace referencia a cualquier numero pero inicia desde el cero(0).
th => Finalización de los numeros ordinarios en ingles, como por ejemplo: 3th, 4th, 5th.
child => elemento hijo.
Además se pueden hacer operaciones aritmeticas dentro como argumentos de la PSEUDOCLASES.
---------------------------------------------

PSEUDOCLASES PARA ELEMENTOS DE UN TIPO
ESPECIFICADO:
.item:nth-of-type(3) {
     background: red
}

Aqui estamos indicando que los
elemento de typo ".item" van a ser
seleccionados para tener un fondo 
de color rojo, especificamente el
elemento ubicado en la posicón
numero tres(3).
---------------------------------------------

PSEUDOCLASES PARA ENLACES:
.enlace:link{};
.enlace:visited{}; Enlace visitado.
---------------------------------------------

PSEUDOCLASES PARA TODOS LOS ELEMENTOS DEL DOM:
:hover{}; Para cuando pase por encima.
:active{}; Cuando le de click pase algo.
input[type='text']:focus{}; Para los 
formularios y que se enfoquen.
---------------------------------------------


DYNAMIC:
:link => (links) Link no visitado.
:visited => (links) Link visitado.
:activate => (links) El momento del click.
:hover => Al poner el mouse sobre el elemento.
:focus => Cuando el elemento tiene el foco.

TARGET:
:target => Elemento que es objetivo de un marcador o ancla.

LANGUAGE:
:lang(en) => Elemento que contiene el atributo 
lang que especifiquemos.
---------------------------------------------

UI States:
Pseudoclases de Estado(States) todas estas 
pseudoclases son de formularios, excepto
"fullscreen".

selector:enable (Aplica para campos habilitados)
selector:disable (Aplica para campos deshabilitados)
selector:checked (Aplica para cuando se de click en un check)
selector:in-range (El Campo tiene un rango min y otro max, si esta en dicho rango se aplica)
selector:out-of-range (El Campo tiene un rango min y otro max, si esta en dicho rango se aplica)
selector:required (Aplica para campos requeridos)
selector:optional (Aplica para campos opcionales, que son los que no tienen la propiedad required)
selector:valid (Aplica para campos que tengan sus validaciones del frontend 100%)
selector:invalid (Aplica para campos que NO tengan sus validaciones del frontend 100%)
selector:read-only (Aplica para los campos de solo lectura)
selector:read-write (Aplica para los campos de solo escritura)
selector:fullscreen (Bucar Info)
------------------------------------------------

Estructuras:
:root => (Representa la raiz del documento(html) usando esta pseudoclase tenemos mas especificidad que si usaramos el html normal)

:empty => (Se aplica para las etiquetas que no tienen ningun contenido interno)

-child:
     :first-child => (Selecciona al primer hijo(independientemente del tipo de etiqueta))
     :last-child => (Selecciona al ultimo hijo(independientemente del tipo de etiqueta))

     :nth-child(n) => (Selecciona al hijo n(independientemente del tipo de etiqueta))
     :nth-last-child(n) => (Selecciona al hijo n empezando a contar desde el Ultimo(independientemente del tipo de etiqueta))

     :only-child => (Selecciona al hijo unico(independientemente del tipo de etiqueta))

-type:
     :first-of-type => (Selecciona al primer hijo que tenga el tipo de selector mencionado(independientemente del tipo de etiqueta))
     :last-of-type => (Selecciona al ultimo hijo que tenga el tipo de selector mencionado(independientemente del tipo de etiqueta))

     :nth-of-type(n) => (Selecciona al hijo n que tenga el tipo de selector mencionado(independientemente del tipo de etiqueta))
     :nth-last-of-type(n) => (Selecciona al hijo n empezando a contar desde el Ultimo que tenga el tipo de selector mencionado(independientemente del tipo de etiqueta))

     :only-of-type => (Selecciona al hijo unico que tenga el tipo de selector mencionado(independientemente del tipo de etiqueta))

VALORES POSIBLES PARA CHILD Y TYPE:
     odd - impares
     even - pares
     numeros enteros => 2,3,4,5,6.......
     equaciones (1n, 3n, 4n+1, n+4......)
     n => es un multiplicador que va desde 0 a n(funciona como un ciclo y en cada iteración aumenta en 1 y va a iterar la cantidad de veces que existan elementos html en el DOM)

-negation:
     :not(selector) Seleccionar al elemento que no cumpla la condición, se puede colocar cualquier otro selector salvo :not.
